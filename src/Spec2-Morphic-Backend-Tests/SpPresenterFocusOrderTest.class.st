Class {
	#name : #SpPresenterFocusOrderTest,
	#superclass : #TestCase,
	#instVars : [
		'mock'
	],
	#category : #'Spec2-Morphic-Backend-Tests'
}

{ #category : #private }
SpPresenterFocusOrderTest >> focusedPresenter [
	
	^ mock allPresentersInFocusOrder 
		detect: [ :each | each adapter widget hasKeyboardFocus ]
]

{ #category : #emulating }
SpPresenterFocusOrderTest >> keyPressed: keyCode shift: shiftBoolean meta: metaBoolean control: controlBoolean option: optionBoolean [
	| evt modifiers widget |
	
	widget := self focusedPresenter adapter widget.
	
	modifiers := 0.
	shiftBoolean ifTrue: [ modifiers := modifiers | 8 ].
	metaBoolean ifTrue: [ modifiers := modifiers |
		(Smalltalk os isWin32 | Smalltalk os isUnix
			ifTrue: [ 2r00010000 ]
			ifFalse: [ 2r01000000 ]) ].
	controlBoolean ifTrue: [ modifiers := modifiers | 2r00010000 ].
	optionBoolean ifTrue: [ modifiers := modifiers |
		(Smalltalk os isWin32 | Smalltalk os isUnix
			ifTrue: [ 2r01000000 ]
			ifFalse: [ 2r00100000 ]) ].
	
	evt := KeyboardEvent new
		setType: #keystroke
		buttons: modifiers
		position: widget position + (1 @ 1)
		keyValue: keyCode
		charCode: keyCode
		hand: self currentWorld activeHand
		stamp: Time millisecondClockValue.

	evt sentTo: widget.
	"Some time to allow things to happen?"
	10 milliSeconds wait
]

{ #category : #emulating }
SpPresenterFocusOrderTest >> pressShiftTab [

	self 
		keyPressed: Character tab asciiValue
		shift: true
		meta: false
		control: false
		option: false
]

{ #category : #emulating }
SpPresenterFocusOrderTest >> pressTab [

	self 
		keyPressed: Character tab asciiValue
		shift: false
		meta: false
		control: false
		option: false
]

{ #category : #running }
SpPresenterFocusOrderTest >> tearDown [

	mock ifNotNil: [ 
		mock hasWindow ifTrue: [ 
			mock window close ] ]
]

{ #category : #tests }
SpPresenterFocusOrderTest >> testCustomFocusOrder [

	mock := SpMockFocusOrderPresenter new.
	mock focusOrder 
		add: (mock presenterAt: #thirdPresenter);
		add: (mock presenterAt: #firstPresenter);
		add: (mock presenterAt: #secondPresenter).
	mock openWithSpec.
	
	"Focus third"
	mock takeKeyboardFocus.
	self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter.
	"Focus first"
	self pressTab.
	self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter.
	"Focus second"
	self pressTab.
	self assert: (mock presenterAt: #secondPresenter) equals: self focusedPresenter.
	"Focus third again"
	self pressTab.
	self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter
]

{ #category : #tests }
SpPresenterFocusOrderTest >> testFocusRotationBackwards [

	mock := SpMockFocusOrderPresenter new
		openWithSpec;
		yourself.
		
	"Focus first"
	mock takeKeyboardFocus.
	self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter.
	"Focus third"
	self pressShiftTab.
	self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter.
	"Focus second"
	self pressShiftTab.
	self assert: (mock presenterAt: #secondPresenter) equals: self focusedPresenter.
	"Focus first again"
	self pressShiftTab.
	self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter
]

{ #category : #tests }
SpPresenterFocusOrderTest >> testFocusRotationForward [

	mock := SpMockFocusOrderPresenter new
		openWithSpec;
		yourself.
		
	"Focus first"
	mock takeKeyboardFocus.
	self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter.
	"Focus second"
	self pressTab.
	self assert: (mock presenterAt: #secondPresenter) equals: self focusedPresenter.
	"Focus third"
	self pressTab.
	self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter.
	"Focus first again"
	self pressTab.
	self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter
]

{ #category : #tests }
SpPresenterFocusOrderTest >> testTakeKeyboardFocus [

	mock := SpMockFocusOrderPresenter new
		openWithSpec;
		yourself.
		
	"Focus first"
	mock takeKeyboardFocus.
	self assert: (mock presenterAt: #firstPresenter) adapter widget hasKeyboardFocus.
	"Focus second"
	(mock presenterAt: #secondPresenter) takeKeyboardFocus.
	self deny: (mock presenterAt: #firstPresenter) adapter widget hasKeyboardFocus.
	self assert: (mock presenterAt: #secondPresenter) adapter widget hasKeyboardFocus.
	"Focus first again"
	(mock presenterAt: #firstPresenter) takeKeyboardFocus.
	self assert: (mock presenterAt: #firstPresenter) adapter widget hasKeyboardFocus.
	self deny: (mock presenterAt: #secondPresenter) adapter widget hasKeyboardFocus.

]
